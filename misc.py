#!/usr/bin/python

import config
import datetime
import json
import net
import os.path
import progressbar
import zipfile

def repo_path(user, repo):
    return os.path.join(config.REPOS_DIR, user, repo)

def zip_path_for_year(year):
    return os.path.join(config.NIST_ZIP_DIR, year + '.zip')

def json_path_for_year(year):
    return os.path.join(config.NIST_JSON_DIR, "nvdcve-1.0-{0}.json".format(year))

def get_nist_feed_years():
    return [str(x) for x in xrange(2002, 2019)]

def should_update_nist():
    if not os.path.isfile(config.NIST_TIME_FILE):
        return True
    with open(config.NIST_TIME_FILE, 'r') as f:
        try:
            last = datetime.datetime.strptime(f.read(), config.DATE_TIME_FORMAT)
        except:
            return True
        delta = datetime.datetime.now() - last
        return delta.days > 1
    return True

def extract_zip(from_path, to_path):
    zip_ref = zipfile.ZipFile(from_path, 'r')
    zip_ref.extractall(to_path)
    zip_ref.close()

def update_nist():
    url_t = "https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-{0}.json.zip"
    years = get_nist_feed_years()
    bar = progressbar.ProgressBar(maxval=len(years))
    print "Updating NIST feed"
    for year in bar(get_nist_feed_years()):
        url = url_t.format(year)
        zip_path = zip_path_for_year(year)
        net.download_file(url, zip_path)
        extract_zip(zip_path, config.NIST_JSON_DIR)
    with open(config.NIST_TIME_FILE, 'w') as f:
        now = datetime.datetime.now()
        f.write(now.strftime(config.DATE_TIME_FORMAT))
    print "Done updating NIST feed"
    print "-" * 80

def crawl_nist_files(item_handler):
    if should_update_nist():
        update_nist()
    else:
        print "Nist feeds are up to date"
    years = get_nist_feed_years()
    bar = progressbar.ProgressBar(maxval=len(years))
    for year in bar(years):
        path = json_path_for_year(year)
        with open(path, "r") as f:
            json_obj = json.load(f)
            cve_items = json_obj["CVE_Items"]
            for cve_item in cve_items:
                item_handler(cve_item)

""" An adapter class for a progressbar with unknown length."""
class UnknownLengthBar:
    def __init__(self):
        self.bar = progressbar.ProgressBar(maxval=progressbar.UnknownLength)
        self.counter = 0
        self.bar.start()

    def update(self):
        self.counter += 1
        self.bar.update(self.counter)

    def finish(self):
        self.bar.finish()
