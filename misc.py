#!/usr/bin/python

import config
import datetime
import net
import os.path
import progressbar
import zipfile

def zip_path_for_year(year):
    return os.path.join(config.NIST_ZIP_DIR, year + '.zip')

def json_path_for_year(year):
    return os.path.join(config.NIST_JSON_DIR, "nvdcve-1.0-{0}.json".format(year))

def get_nist_feed_years():
    return [str(x) for x in xrange(2002, 2019)]

def should_update_nist():
    if not os.path.isfile(config.NIST_TIME_FILE):
        return True
    with open(config.NIST_TIME_FILE, 'r') as f:
        try:
            last = datetime.datetime.strptime(f.read(), config.DATE_TIME_FORMAT)
        except:
            return True
        delta = datetime.datetime.now() - last
        return delta.days > 1
    return True

def extract_zip(from_path, to_path):
    zip_ref = zipfile.ZipFile(from_path, 'r')
    zip_ref.extractall(to_path)
    zip_ref.close()

def update_nist():
    url_t = "https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-{0}.json.zip"
    years = get_nist_feed_years()
    bar = progressbar.ProgressBar(maxval=len(years))
    print "Updating NIST feed"
    for year in bar(get_nist_feed_years()):
        url = url_t.format(year)
        zip_path = zip_path_for_year(year)
        net.download_file(url, zip_path)
        extract_zip(zip_path, config.NIST_JSON_DIR)
    with open(config.NIST_TIME_FILE, 'w') as f:
        now = datetime.datetime.now()
        f.write(now.strftime(config.DATE_TIME_FORMAT))
    print "Done updating NIST feed"
    print "-" * 80

def measure_decorator(func):
    def wrapper():
        column_t = "| {0: ^30} | {1: ^20} | {2: ^6} | {3: ^6} |\n"
        print "{0} started".format(func.func_name)
        unique_cves_count, working_urls_count = func()
        print "{0} finished".format(func.func_name)
        print "=" * 80
        first_launch = not hasattr(config, config.MEASURE_DECORATOR_KEY)
        with open(config.MEASUREMENTS_FILE, "a") as f:
            if first_launch:
                setattr(config, config.MEASURE_DECORATOR_KEY, True)
                f.write("=" * 80 + "\n")
                header = column_t.format("func name", "time", "cves", "urls")
                f.write(header)
                f.write("-" * len(header) + "\n")
            msg = column_t.format(
                    func.func_name,
                    datetime.datetime.now().strftime(config.DATE_TIME_FORMAT),
                    unique_cves_count,
                    working_urls_count,
            )
            f.write(msg)
            f.write("-" * len(msg) + "\n")
    return wrapper

