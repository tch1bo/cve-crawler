import misc
import re

from os.path import commonprefix
from urlparse import urlparse, urlunparse

def normalize_url(url):
    parse_result = urlparse(url)
    parse_result_list = list(parse_result)
    parse_result_list[0] = "http"
    parse_result_list[1] = re.sub(r":\d+", "", parse_result.netloc)
    parse_result_list[1] = re.sub(r"www\.", "", parse_result_list[1])
    return parse_result_list[1], urlunparse(parse_result_list)

class UrlCluster:
    def __init__(self, netloc):
        self.netloc = netloc
        self.longest_prefix = netloc
        self.urls = set()

    def add_url(self, url):
        self.urls.add(url)

    def __len__(self):
        return len(self.urls)

    def __repr__(self):
        s = "Cluster: prefix='{0}', count='{1}', example='{2}'".\
                format(self.longest_prefix, len(self), list(self.urls)[0])
        return s

    def update_longest_prefix(self):
        self.longest_prefix = commonprefix(list(self.urls))
        return self.longest_prefix

class UrlClusterManager:
    def __init__(self):
        self.clusters = {}

    def add_url(self, url):
        netloc, new_url = normalize_url(url)
        self.clusters.setdefault(netloc, UrlCluster(netloc))
        self.clusters[netloc].add_url(new_url)

    def add_urls(self, urls):
        for url in urls:
            self.add_url(url)

    def str_n_clusters(self, start, finish):
        total_urls = sum([len(x) for x in self.clusters.values()])
        s = "ClusterManager: cluster_count={0} url_count={1}, clusters:\n\t".\
                format(len(self), total_urls)
        clusters = sorted(list(self.clusters.values()), key=len, reverse=True)[start:finish]
        return s + "\n\t".join([str(c) for c in clusters])

    def update_prefixes(self):
        for cluster in self.clusters.values():
            cluster.update_longest_prefix()

    def __len__(self):
        return len(self.clusters)

    def __repr__(self):
        return self.str_n_clusters(len(self))

def cluster_nist_urls():
    manager = UrlClusterManager()
    def items_handler(cve_items):
        get_urls = lambda item: item["cve"]["references"]["reference_data"]
        urls = [x["url"] for item in cve_items for x in get_urls(item)]
        manager.add_urls(urls)

    misc.crawl_nist_files(items_handler, parallel=False)
    manager.update_prefixes()
    return manager
