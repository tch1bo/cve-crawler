#!/usr/bin/python

import config
import csv
import db
import models
import progressbar
import re

def store_initial_cves():
    url_re = re.compile(r'\s+(CONFIRM|URL|MISC):(\S+)')
    print "Parsing file: {0}".format(config.CVE_CSV_FILE)
    num_lines = sum(1 for line in open(config.CVE_CSV_FILE))
    bar = progressbar.ProgressBar(maxval=num_lines)
    cves = []
    url_set = set() # Urls might not be unique.
    cves_to_urls = []

    with open(config.CVE_CSV_FILE, "r") as f:
        csv_reader = csv.reader(f)
        for cve_record in bar(csv_reader):
            cves.append((("cve_string", cve_record[0]), ))
            for field in cve_record:
                for tmp in re.findall(url_re, field):
                    url_string = tmp[1]
                    if not url_string in url_set:
                        url_set.add(url_string)
                    cves_to_urls.append({"url": url_string, "cve": cve_record[0]})

        urls = [(("url", url_string), ) for url_string in url_set]

        cve_objects = db.find_or_add_objects(models.CVE, cves, need_ids=True)
        url_objects = db.find_or_add_objects(models.URL, urls, need_ids=True)

        cves_to_urls_ids = []
        print "Matching urls and cves"
        bar = progressbar.ProgressBar(maxval=len(cves_to_urls))
        for x in bar(cves_to_urls):
            # Find corresponding cve and url.
            cve = cve_objects[(("cve_string", x["cve"]),)]
            url = url_objects[(("url", x["url"]),)]
            # Craft a table record using the cve and url ids.
            cves_to_urls_ids.append((("cve_id", cve.id), ("url_id", url.id)))

        db.find_or_add_for_mtm_table(models.cve_url_table, cves_to_urls_ids)
