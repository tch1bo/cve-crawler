#!/usr/bin/python

import config
import db
import json
import models
import requests

github_auth = None
github_empty_searches = None

def renew_github_empty_searches():
    global github_empty_searches
    github_empty_searches = set([x[0] for x in
        db.session.query(models.GithubEmptySearch.query).all()])

renew_github_empty_searches()

def set_github_auth():
    global github_auth
    github_auth = \
            requests.auth.HTTPBasicAuth(config.gusername, config.gpassword)

def get_api_url(user, repo):
    t = "https://api.github.com/repos/{0}/{1}/contents"
    return t.format(user, repo)

def get_raw_resource(url, **kwargs):
    req = requests.get(url, **kwargs)
    if req.status_code != 200:
        raise Exception("server replied with {0}. Text: {1}".format(
            req.status_code, req.text))
    return req.text

def get_json_resource(url, **kwargs):
    return json.loads(get_raw_resource(url, **kwargs))

def github_search(query):
    if config.GITHUB_SEARCH_COUNT_EXCEEDED:
        return None
    if query in github_empty_searches:
        return None
    query_url = "https://api.github.com/search/commits"
    try:
        answer = get_json_resource(query_url, auth=github_auth,
                headers={"Accept": "application/vnd.github.cloak-preview"},
                params={"q": query},
                )
    except:
        config.GITHUB_SEARCH_COUNT_EXCEEDED = True
        return None
    if not answer["items"]:
        # print "added {0} to empty searches".format(query)
        db.find_or_add_object_orm(models.GithubEmptySearch, query=query)
        renew_github_empty_searches()

    return answer

def download_file(url, local_path):
    r = requests.get(url, stream=False)
    with open(local_path, "wb") as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:
                f.write(chunk)
