import analyser
import config
import db
import flask
import json
import models
import stats

from models import CVE, NonCVE, CommitHash, URL

app = flask.Flask(__name__)

def count(table):
    return db.global_session.query(table).count()

def get_all_func(table):
    return db.global_session.query(table).order_by(table.id).all

def get_non_empty_func(table, collection_key):
    attr = getattr(table, collection_key)
    return db.global_session.query(table).filter(attr.any()).order_by(table.id).all

def get_by_id(table, obj_id):
    return db.global_session.query(table).get(obj_id)

found_hashes = set(analyser.get_found_hashes())
@app.context_processor
def inject_hashes():
    return dict(found_hashes=found_hashes)

@app.route("/")
def index():
    cve_count = stats.measure_stats().cves_count
    kwargs = {
            "cve_count": cve_count,
            "total_cve_count": count(CVE),
            "total_non_cve_count": count(NonCVE),
            "url_count": count(URL),
            "hash_count": count(CommitHash),
    }
    return flask.render_template("index.html", **kwargs)

@app.route("/stats")
def stats_func():
    with open(config.STATS_FILE, "r") as f:
        data = json.load(f)
    return flask.jsonify(data)

def collection_endpoint_factory(endpoint_name, **kwargs):
    def inner():
        new_kwargs = {key: func() for key, func in kwargs.iteritems()}
        return flask.render_template(endpoint_name + ".html", **new_kwargs)
    app.add_url_rule("/" + endpoint_name, endpoint_name, inner)
    return inner

cves_endpoint = collection_endpoint_factory("cves",
        cves=get_non_empty_func(CVE, "urls"),
        non_cves=get_non_empty_func(NonCVE, "urls"),
)

urls_endpoint = collection_endpoint_factory("urls",
        urls=get_all_func(URL),
)

hashes_endpoint = collection_endpoint_factory("hashes",
        hashes=get_all_func(CommitHash),
)

def item_endpoint_factory(table):
    name = table.__tablename__
    def inner(obj_id):
        kwargs = {name: get_by_id(table, obj_id)}
        return flask.render_template(name + ".html", **kwargs)
    app.add_url_rule("/{0}/<int:obj_id>".format(name), name, inner)
    return inner

item_endpoints = map(item_endpoint_factory, [CVE, NonCVE, CommitHash, URL])

@app.route("/hash_search/<string:hash_id>")
def hash_search(hash_id):
    h = db.global_session.query(models.CommitHash).filter(
            models.CommitHash.hash == hash_id).first()
    if not h:
        return flask.redirect("/hash/0")
    return flask.redirect("/hash/" + str(h.id))

if __name__ == "__main__":
    app.run(port=10000, debug=True)
