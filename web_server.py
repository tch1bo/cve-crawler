import analyser
import collections
import config
import db
import flask
import flask_wtf
import json
import misc
import models
import re
import requests
import stats
import wtforms

from models import CVE, NonCVE, CommitHash, URL, CWE

app = flask.Flask(__name__)
csrf = flask_wtf.CSRFProtect(app)

def count(table):
    return db.global_session.query(table).count()

def get_all_func(table):
    return db.global_session.query(table).order_by(table.id).all

def get_non_empty_func(table, collection_key):
    attr = getattr(table, collection_key)
    return db.global_session.query(table).filter(attr.any()).order_by(table.id).all

def get_by_id(table, obj_id):
    return db.global_session.query(table).get(obj_id)

found_hashes = set(analyser.get_found_hashes())

cve_to_hash_query = """
    select cve.id, hash.id, hash.hash from cve
    inner join cve_to_url on cve_to_url.cve_id = cve.id
    inner join hash_to_url on hash_to_url.url_id = cve_to_url.url_id
    inner join hash on hash.id = hash_to_url.hash_id;
"""
results = db.engine.execute(cve_to_hash_query).fetchall()
cve_to_hash_map = {}
for r in results:
    cve_to_hash_map.setdefault(r[0], [])
    if r[2] in found_hashes:
        cve_to_hash_map[r[0]].append(r[1])

cwe_to_cve_query = """
    select cwe_id, cve_id from cve_to_cwe;
"""
results = db.engine.execute(cwe_to_cve_query).fetchall()
cwe_to_hash_map = {}
for r in results:
    if cve_to_hash_map.get(r[1]):
        cwe = get_by_id(CWE, r[0])
        cwe_to_hash_map.setdefault(cwe, []).extend(cve_to_hash_map[r[1]])

def get_non_empty_cwes_func():
    non_empty_cwes = filter(lambda x: len(x[1]) > 0, cwe_to_hash_map.iteritems())
    return [k for k, v in sorted(non_empty_cwes, key=lambda x: len(x[1]), reverse=True)]

@app.context_processor
def inject_hashes():
    d = {
            "found_hashes": found_hashes,
            "cve_to_hash_map": cve_to_hash_map,
            "cwe_to_hash_map": cwe_to_hash_map,
            "languages": gr_languages,
            "gr_data_by_hash": gr_data_by_hash,
    }
    return d

@app.route("/")
def index():
    cve_count = stats.measure_stats().cves_count
    kwargs = {
            "cve_count": cve_count,
            "total_cve_count": count(CVE),
            "total_non_cve_count": count(NonCVE),
            "url_count": count(URL),
            "hash_count": count(CommitHash),
    }
    return flask.render_template("index.html", **kwargs)

@app.route("/stats")
def stats_func():
    with open(config.STATS_FILE, "r") as f:
        data = json.load(f)
    return flask.jsonify(data)

def collection_endpoint_factory(endpoint_name, **kwargs):
    def inner():
        new_kwargs = {key: func() for key, func in kwargs.iteritems()}
        return flask.render_template(endpoint_name + ".html", **new_kwargs)
    app.add_url_rule("/" + endpoint_name, endpoint_name, inner)
    return inner

cves_endpoint = collection_endpoint_factory("cves",
        cves=get_non_empty_func(CVE, "urls"),
        non_cves=get_non_empty_func(NonCVE, "urls"),
)

urls_endpoint = collection_endpoint_factory("urls",
        urls=get_all_func(URL),
)

hashes_endpoint = collection_endpoint_factory("hashes",
        hashes=get_all_func(CommitHash),
)

cwes_endpoint = collection_endpoint_factory("cwes",
        cwes=get_non_empty_cwes_func
)

def item_endpoint_factory(table):
    name = table.__tablename__
    def inner(obj_id):
        kwargs = {name: get_by_id(table, obj_id)}
        return flask.render_template(name + ".html", **kwargs)
    app.add_url_rule("/{0}/<int:obj_id>".format(name), name, inner)
    return inner

item_endpoints = map(item_endpoint_factory, [CVE, NonCVE, CommitHash, URL, CWE])

@app.route("/hash_search/<string:hash_id>")
def hash_search(hash_id):
    h = db.global_session.query(models.CommitHash).filter(
            models.CommitHash.hash == hash_id).first()
    if not h:
        return flask.redirect("/hash/0")
    return flask.redirect("/hash/" + str(h.id))

class VulnSearchForm(flask_wtf.FlaskForm):
    regex_field = wtforms.StringField("regex")
    cwe_field = wtforms.SelectField("cwe", choices=[(0, "No cwe")] +
                [(str(x.id), x.description) for x in get_non_empty_cwes_func()])
    submit = wtforms.SubmitField("Search")

@app.route("/vuln_search", methods=["GET", "POST"])
@csrf.exempt
def vuln_search():
    form = VulnSearchForm()
    if not form.is_submitted():
        return flask.render_template("vuln_search.html", form=form, results={})

    results = {lang: set() for lang in gr_languages}

    regex = form.regex_field.data
    if regex:
        for x in filter(lambda x: re.search(regex, x.msg, re.IGNORECASE), gr_data):
            results[x.lang].add(x)

    cwe_id = form.cwe_field.data
    if cwe_id and int(cwe_id) > 0:
        cwe = get_by_id(models.CWE, cwe_id)
        for hash_id in cwe_to_hash_map[cwe]:
            r = gr_data_by_hash[get_by_id(CommitHash, hash_id).hash]
            results[r.lang].add(r)

    return flask.render_template("vuln_search.html", form=form, results=results)



# Good rules wrapper code.
###############################################################################

gr_ports = {
        "java": 5000,
        "python": 5001,
        "javascript": 5002,
}
gr_languages = gr_ports.keys()

def gr_url_for_lang(lang):
    return "http://localhost:{0}".format(gr_ports[lang])

def gr_url_for_lang_and_change_id(lang, c_id):
    return gr_url_for_lang(lang) + "/changeid?change_id={0}".format(c_id)

Result = collections.namedtuple("Result",
        ["url", "msg", "lang", "change_id", "commit_hash"])
def gr_crawl_language(lang):
    change_id = 0
    message_regex = re.compile("<h3>(.+?)</h3>", re.DOTALL)
    commit_hash_regex = re.compile(r"All revisions.+?commit/([a-f0-9]{40})")
    changes = []
    while True:
        url = gr_url_for_lang_and_change_id(lang, change_id)
        r = requests.get(url)
        if "Invalid change_id." in r.text:
            return changes
        message = re.findall(message_regex, r.text)[0]
        commit_hash = re.findall(commit_hash_regex, r.text)[0]
        changes.append(Result(url, message, lang, change_id, commit_hash))
        change_id += 1

print "Crawling good rules"
gr_data = misc.flatten_list([gr_crawl_language(lang) for lang in gr_languages])
gr_data_by_hash = {x.commit_hash: x for x in gr_data}
print "Crawling good rules done"

###############################################################################

if __name__ == "__main__":
    app.secret_key = "asd"
    app.run(port=10000, debug=True)
