#!/usr/bin/python

import sqlalchemy as sa
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

cve_url_table = sa.Table("cves_to_urls", Base.metadata,
        sa.Column("cve_id", sa.Integer, sa.ForeignKey("cves.id")),
        sa.Column("url_id", sa.Integer, sa.ForeignKey("urls.id")),
)

working_url_table = sa.Table("working_urls", Base.metadata,
        sa.Column("cve_id", sa.Integer, sa.ForeignKey("cves.id")),
        sa.Column("url_id", sa.Integer, sa.ForeignKey("urls.id")),
)

class CVE(Base):
    __tablename__ = "cves"
    sort_field = "cve_string"

    id = sa.Column(sa.Integer, primary_key=True)
    cve_string = sa.Column(sa.String(20), unique=True, nullable=False)
    tag = sa.Column(sa.String(50))

    urls = relationship("URL", secondary=cve_url_table, backref="cves")
    working_urls = relationship("URL", secondary=working_url_table, backref="working_cves")

    def add_tag(self, tag):
        if not self.tag:
            self.tag = ""
        tag_string = tag + ";"
        if not tag_string in self.tag:
            self.tag += tag_string

    def __repr__(self):
        return self.cve_string

class URL(Base):
    __tablename__ = "urls"
    sort_field = "url"

    id = sa.Column(sa.Integer, primary_key=True)
    url = sa.Column(sa.String(100), unique=True, nullable=False)

    def __repr__(self):
        return "URL: '{0}'".format(self.url)

