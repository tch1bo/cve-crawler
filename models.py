#!/usr/bin/python

import hashlib
import sqlalchemy as sa
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

cve_url_table = sa.Table("cves_to_urls", Base.metadata,
        sa.Column("cve_id", sa.Integer, sa.ForeignKey("cves.id")),
        sa.Column("url_id", sa.Integer, sa.ForeignKey("urls.id")),
)

non_cve_url_table = sa.Table("non_cve_urls", Base.metadata,
        sa.Column("non_cve_id", sa.Integer, sa.ForeignKey("non_cves.id")),
        sa.Column("url_id", sa.Integer, sa.ForeignKey("urls.id")),
)

hash_url_table = sa.Table("hashes_to_urls", Base.metadata,
        sa.Column("hash_id", sa.Integer, sa.ForeignKey("hashes.id")),
        sa.Column("url_id", sa.Integer, sa.ForeignKey("urls.id")),
)

def __add_tag__(obj, tag):
    if not obj.tag:
        obj.tag = ""
    tag_string = tag + ";"
    if not tag_string in obj.tag:
        obj.tag += tag_string

class CVE(Base):
    __tablename__ = "cves"
    sort_field = "cve_string"
    add_tag = __add_tag__

    id = sa.Column(sa.Integer, primary_key=True)
    cve_string = sa.Column(sa.String(20), unique=True, nullable=False)
    tag = sa.Column(sa.String(50))

    urls = relationship("URL", secondary=cve_url_table, backref="cves")

    def __repr__(self):
        return self.cve_string

class NonCVE(Base):
    # SQLAlchemy columns have to be explicitly defined in each class, so
    # there's no point in inheritance here.
    __tablename__ = "non_cves"
    sort_field = "id"
    add_tag = __add_tag__

    id = sa.Column(sa.Integer, primary_key=True)
    tag = sa.Column(sa.String(50))

    # Used only at creation time to avoid duplicates.
    # Is not updated later.
    hash_id = sa.Column(sa.String(40), unique=True)

    urls = relationship("URL", secondary=non_cve_url_table,
            backref="non_cves")

    def __repr__(self):
        return "NonCVE: {0}".format(self.id)

    @staticmethod
    def hash_id_for_urls(url_strings):
        sha = hashlib.sha1()
        for url in sorted(url_strings):
            sha.update(url)
        return sha.hexdigest()

class URL(Base):
    __tablename__ = "urls"
    sort_field = "url"

    id = sa.Column(sa.Integer, primary_key=True)
    url = sa.Column(sa.String(100), unique=True, nullable=False)

    def __repr__(self):
        return "URL: '{0}'".format(self.url)

class CommitHash(Base):
    __tablename__ = "hashes"
    sort_field = "hash"

    id = sa.Column(sa.Integer, primary_key=True)
    hash = sa.Column(sa.String(40), unique=True)

    urls = relationship("URL", secondary=hash_url_table, backref="hashes")

class GithubEmptySearch(Base):
    __tablename__ = "github_empty_searches"
    sort_field = "query"

    id = sa.Column(sa.Integer, primary_key=True)
    query = sa.Column(sa.String(50), unique=True)
