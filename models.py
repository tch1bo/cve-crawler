#!/usr/bin/python

import config
import hashlib
import sqlalchemy as sa
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

def mtmTableFactory(left_name, right_name):
    l = left_name
    r = right_name
                     # cve_to_url
    table = sa.Table("%s_to_%s" % (l, r), Base.metadata,
                        # cve_id                                 cve.id
                sa.Column("%s_id" % l, sa.Integer, sa.ForeignKey("%s.id" % l)),
                        # url_id                                 url.id
                sa.Column("%s_id" % r, sa.Integer, sa.ForeignKey("%s.id" % r)),
            )
    return table

cve_url_table = mtmTableFactory("cve", "url")
non_cve_url_table = mtmTableFactory("non_cve", "url")
hash_url_table = mtmTableFactory("hash", "url")
query_hash_table = mtmTableFactory("github_search_query", "hash")
query_url_table = mtmTableFactory("github_search_query", "url")
cve_cwe_table = mtmTableFactory("cve", "cwe")

def __add_tags__(obj, tags):
    old_tags = obj.tag.split(";") if obj.tag else []
    return ";".join(set(tags + old_tags))

class CWE(Base):
    __tablename__ = "cwe"
    unique_field = "cwe_string"

    id = sa.Column(sa.Integer, primary_key=True)
    cwe_string = sa.Column(sa.String(20), unique=True, default=0)
    description = sa.Column(sa.String(200))

    def __repr__(self):
        return "CWE: \"{0}, {1}\"".format(self.cwe_string, self.description)

class CVE(Base):
    __tablename__ = "cve"
    unique_field = "cve_string"
    add_tags = __add_tags__

    id = sa.Column(sa.Integer, primary_key=True)
    cve_string = sa.Column(sa.String(20), unique=True, nullable=False)
    tag = sa.Column(sa.String(50))

    urls = relationship("URL", secondary=cve_url_table, backref="cves")
    cwes = relationship("CWE", secondary=cve_cwe_table, backref="cves")

    def __repr__(self):
        return self.cve_string

class NonCVE(Base):
    # SQLAlchemy columns have to be explicitly defined in each class, so
    # there's no point in inheritance here.
    __tablename__ = "non_cve"
    unique_field = "hash_id"
    add_tags = __add_tags__

    id = sa.Column(sa.Integer, primary_key=True)
    tag = sa.Column(sa.String(50))

    # Used only at creation time to avoid duplicates.
    # Is not updated later.
    hash_id = sa.Column(sa.String(40), unique=True)

    urls = relationship("URL", secondary=non_cve_url_table,
            backref="non_cves")

    def __repr__(self):
        return "NonCVE: {0}".format(self.id)

    @staticmethod
    def hash_id_for_urls(url_strings):
        sha = hashlib.sha1()
        for url in sorted(url_strings):
            sha.update(url)
        return sha.hexdigest()

class URL(Base):
    __tablename__ = "url"
    unique_field = "url"

    id = sa.Column(sa.Integer, primary_key=True)
    url = sa.Column(sa.String(1000), unique=True, nullable=False)

    def __repr__(self):
        return "URL: '{0}'".format(self.url)

class CommitHash(Base):
    __tablename__ = "hash"
    unique_field = "hash"

    id = sa.Column(sa.Integer, primary_key=True)
    hash = sa.Column(sa.String(40), unique=True)

    urls = relationship("URL", secondary=hash_url_table, backref="hashes")

class GithubSearchQuery(Base):
    __tablename__ = "github_search_query"
    unique_field = "query"

    # Possible query states.
    NOT_SEEN = 0
    EMPTY = 1
    NON_EMPTY = 2
    ERROR = 3

    id = sa.Column(sa.Integer, primary_key=True)
    query = sa.Column(sa.String(config.MAX_GITHUB_QUERY_LEN, collation="latin1_general_cs"), unique=True)
    state = sa.Column(sa.Integer, default=NOT_SEEN)

    hashes = relationship("CommitHash", secondary=query_hash_table, backref="queries")
    urls = relationship("URL", secondary=query_url_table, backref="queries")

# TODO: refactor this!
cve_url_table.left_table = CVE
cve_url_table.right_table = URL

non_cve_url_table.left_table = NonCVE
non_cve_url_table.right_table = URL

hash_url_table.left_table = CommitHash
hash_url_table.right_table = URL

query_hash_table.left_table = GithubSearchQuery
query_hash_table.right_table = CommitHash

query_url_table.left_table = GithubSearchQuery
query_url_table.right_table = URL

cve_cwe_table.left_table = CVE
cve_cwe_table.right_table = CWE

